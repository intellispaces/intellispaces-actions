package tech.intellispaces.action.interceptor.skip;

import org.junit.jupiter.api.Test;
import tech.intellispaces.action.Action5;
import tech.intellispaces.action.Actions;

import java.util.ArrayList;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static tech.intellispaces.entity.type.PrimitiveFunctions.booleanToDouble;
import static tech.intellispaces.entity.type.PrimitiveFunctions.booleanToInt;
import static tech.intellispaces.entity.type.PrimitiveFunctions.booleanToString;

/**
 * Tests for class {@link SkipFollowingTimesInterceptor5}.
 */
public class SkipFollowingTimesInterceptor5Test {

  @Test
  public void testExecute() {
    // Given
    List<Double> list = new ArrayList<>();
    Action5<String, Number, Number, Number, Number, Number> action5 = spy(Actions.get(
        (Number n1, Number n2, Number n3, Number n4, Number n5) -> booleanToString(addSumToList(list, n1, n2, n3, n4, n5)))
    );
    var interceptor = new SkipFollowingTimesInterceptor5<>(action5);

    // When
    String result1 = interceptor.execute(Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1));
    String result2 = interceptor.execute(Integer.valueOf(2), Integer.valueOf(2), Integer.valueOf(2), Integer.valueOf(2), Integer.valueOf(2));
    String result3 = interceptor.execute(Integer.valueOf(3), Integer.valueOf(3), Integer.valueOf(3), Integer.valueOf(3), 3);
    String result4 = interceptor.execute(Integer.valueOf(4), Integer.valueOf(4), Integer.valueOf(4), Integer.valueOf(4), 4.0);
    String result5 = interceptor.execute(Integer.valueOf(5), Integer.valueOf(5), Integer.valueOf(5), 5, 5);
    String result6 = interceptor.execute(Integer.valueOf(6), Integer.valueOf(6), Integer.valueOf(6), 6, 6.0);
    String result7 = interceptor.execute(Integer.valueOf(7), Integer.valueOf(7), Integer.valueOf(7), 7.0, 7);
    String result8 = interceptor.execute(Integer.valueOf(8), Integer.valueOf(8), Integer.valueOf(8), 8.0, 8.0);
    String result9 = interceptor.execute(Integer.valueOf(9), Integer.valueOf(9), 9, 9, 9);
    String result10 = interceptor.execute(Integer.valueOf(10), Integer.valueOf(10), 10, 10, 10.0);
    String result11 = interceptor.execute(Integer.valueOf(11), Integer.valueOf(11), 11, 11.0, 11);
    String result12 = interceptor.execute(Integer.valueOf(12), Integer.valueOf(12), 12, 12.0, 12.0);
    String result13 = interceptor.execute(Integer.valueOf(13), Integer.valueOf(13), 13.0, 13, 13);
    String result14 = interceptor.execute(Integer.valueOf(14), Integer.valueOf(14), 14.0, 14, 14.0);
    String result15 = interceptor.execute(Integer.valueOf(15), Integer.valueOf(15), 15.0, 15.0, 15);
    String result16 = interceptor.execute(Integer.valueOf(16), Integer.valueOf(16), 16.0, 16.0, 16.0);
    String result17 = interceptor.execute(Integer.valueOf(17), 17, 17, 17, 17);
    String result18 = interceptor.execute(Integer.valueOf(18), 18, 18, 18, 18.0);
    String result19 = interceptor.execute(Integer.valueOf(19), 19, 19, 19.0, 19);
    String result20 = interceptor.execute(Integer.valueOf(20), 20, 20, 20.0, 20.0);
    String result21 = interceptor.execute(Integer.valueOf(21), 21, 21.0, 21,21);
    String result22 = interceptor.execute(Integer.valueOf(22), 22, 22.0, 22, 22.0);
    String result23 = interceptor.execute(Integer.valueOf(23), 23, 23.0, 23.0, 23);
    String result24 = interceptor.execute(Integer.valueOf(24), 24, 24.0, 24.0, 24.0);
    String result25 = interceptor.execute(Integer.valueOf(25), 25.0, 25, 25, 25);
    String result26 = interceptor.execute(Integer.valueOf(26), 26.0, 26, 26, 26.0);
    String result27 = interceptor.execute(Integer.valueOf(27), 27.0, 27, 27.0, 27);
    String result28 = interceptor.execute(Integer.valueOf(28), 28.0, 28, 28.0, 28.0);
    String result29 = interceptor.execute(Integer.valueOf(29), 29.0, 29.0, 29, 29);
    String result30 = interceptor.execute(Integer.valueOf(30), 30.0, 30.0, 30, 30.0);
    String result31 = interceptor.execute(Integer.valueOf(31), 31.0, 31.0, 31.0, 31);
    String result32 = interceptor.execute(Integer.valueOf(32), 32.0, 32.0, 32.0, 32.0);
    String result33 = interceptor.execute(33, 33, 33, 33, 33);
    String result34 = interceptor.execute(34, 34, 34, 34, 34.0);
    String result35 = interceptor.execute(35, 35, 35, 35.0, 35);
    String result36 = interceptor.execute(36, 36, 36, 36.0, 36.0);
    String result37 = interceptor.execute(37, 37, 37.0, 37, 37);
    String result38 = interceptor.execute(38, 38, 38.0, 38, 38.0);
    String result39 = interceptor.execute(39, 39, 39.00, 39.0, 39);
    String result40 = interceptor.execute(40, 40, 40.0, 40.0, 40.0);
    String result41 = interceptor.execute(41, 41.0, 41, 41, 41);
    String result42 = interceptor.execute(42, 42.0, 42, 42, 42.0);
    String result43 = interceptor.execute(43, 43.0, 43, 43.0, 43);
    String result44 = interceptor.execute(44, 44.0, 44, 44.0, 44.0);
    String result45 = interceptor.execute(45, 45.0, 45.0, 45, 45);
    String result46 = interceptor.execute(46, 46.0, 46.0, 46, 46.0);
    String result47 = interceptor.execute(47, 47.0, 47.0, 47.0, 47);
    String result48 = interceptor.execute(48, 48.0, 48.0, 48.0, 48.0);
    String result49 = interceptor.execute(49.0, 49, 49, 49, 49);
    String result50 = interceptor.execute(50.0, 50, 50, 50, 50.0);
    String result51 = interceptor.execute(51.0, 51, 51, 51.0, 51);
    String result52 = interceptor.execute(52.0, 52, 52, 52.0, 52.0);
    String result53 = interceptor.execute(53.0, 53, 53.0, 53, 53);
    String result54 = interceptor.execute(54.0, 54, 54.0, 54, 54.0);
    String result55 = interceptor.execute(55.0, 55, 55.0, 55.0, 55);
    String result56 = interceptor.execute(56.0, 56, 56.0, 56.0, 56.0);
    String result57 = interceptor.execute(57.0, 57.0, 57, 57, 57);
    String result58 = interceptor.execute(58.0, 58.0, 58, 58, 58.0);
    String result59 = interceptor.execute(59.0, 59.0, 59, 59.0, 59);
    String result60 = interceptor.execute(60.0, 60.0, 60, 60.0, 60.0);
    String result61 = interceptor.execute(61.0, 61.0, 61.0, 61, 61);
    String result62 = interceptor.execute(62.0, 62.0, 62.0, 62, 62.0);
    String result63 = interceptor.execute(63.0, 63.0, 63.0, 63.0, 63);
    String result64 = interceptor.execute(64.0, 64.0, 64.0, 64.0, 64.0);

    // Then
    assertThat(result1).isEqualTo("true");
    assertThat(result2).isNull();
    assertThat(result3).isNull();
    assertThat(result4).isNull();
    assertThat(result5).isNull();
    assertThat(result6).isNull();
    assertThat(result7).isNull();
    assertThat(result8).isNull();
    assertThat(result9).isNull();
    assertThat(result10).isNull();
    assertThat(result11).isNull();
    assertThat(result12).isNull();
    assertThat(result13).isNull();
    assertThat(result14).isNull();
    assertThat(result15).isNull();
    assertThat(result16).isNull();
    assertThat(result17).isNull();
    assertThat(result18).isNull();
    assertThat(result19).isNull();
    assertThat(result20).isNull();
    assertThat(result21).isNull();
    assertThat(result22).isNull();
    assertThat(result23).isNull();
    assertThat(result24).isNull();
    assertThat(result25).isNull();
    assertThat(result26).isNull();
    assertThat(result27).isNull();
    assertThat(result28).isNull();
    assertThat(result29).isNull();
    assertThat(result30).isNull();
    assertThat(result31).isNull();
    assertThat(result32).isNull();
    assertThat(result33).isNull();
    assertThat(result34).isNull();
    assertThat(result35).isNull();
    assertThat(result36).isNull();
    assertThat(result37).isNull();
    assertThat(result38).isNull();
    assertThat(result39).isNull();
    assertThat(result40).isNull();
    assertThat(result41).isNull();
    assertThat(result42).isNull();
    assertThat(result43).isNull();
    assertThat(result44).isNull();
    assertThat(result45).isNull();
    assertThat(result46).isNull();
    assertThat(result47).isNull();
    assertThat(result48).isNull();
    assertThat(result49).isNull();
    assertThat(result50).isNull();
    assertThat(result51).isNull();
    assertThat(result52).isNull();
    assertThat(result53).isNull();
    assertThat(result54).isNull();
    assertThat(result55).isNull();
    assertThat(result56).isNull();
    assertThat(result57).isNull();
    assertThat(result58).isNull();
    assertThat(result59).isNull();
    assertThat(result60).isNull();
    assertThat(result61).isNull();
    assertThat(result62).isNull();
    assertThat(result63).isNull();
    assertThat(result64).isNull();

    verify(action5, times(1)).execute(eq(Integer.valueOf(1)), eq(Integer.valueOf(1)), eq(Integer.valueOf(1)), eq(Integer.valueOf(1)), eq(Integer.valueOf(1)));
    verify(action5, never()).execute(eq(Integer.valueOf(2)), eq(Integer.valueOf(2)), eq(Integer.valueOf(2)), eq(Integer.valueOf(2)), eq(Integer.valueOf(2)));
    verify(action5, never()).execute(eq(Integer.valueOf(3)), eq(Integer.valueOf(3)), eq(Integer.valueOf(3)), eq(Integer.valueOf(3)), eq(3));
    verify(action5, never()).execute(eq(Integer.valueOf(4)), eq(Integer.valueOf(4)), eq(Integer.valueOf(4)), eq(Integer.valueOf(4)), eq(4.0));
    verify(action5, never()).execute(eq(Integer.valueOf(5)), eq(Integer.valueOf(5)), eq(Integer.valueOf(5)), eq(5), eq(5));
    verify(action5, never()).execute(eq(Integer.valueOf(6)), eq(Integer.valueOf(6)), eq(Integer.valueOf(6)), eq(6), eq(6.0));
    verify(action5, never()).execute(eq(Integer.valueOf(7)), eq(Integer.valueOf(7)), eq(Integer.valueOf(7)), eq(7.0), eq(7));
    verify(action5, never()).execute(eq(Integer.valueOf(8)), eq(Integer.valueOf(8)), eq(Integer.valueOf(8)), eq(8.0), eq(8.0));
    verify(action5, never()).execute(eq(Integer.valueOf(9)), eq(Integer.valueOf(9)), eq(9), eq(9), eq(9));
    verify(action5, never()).execute(eq(Integer.valueOf(10)), eq(Integer.valueOf(10)), eq(10), eq(10), eq(10.0));
    verify(action5, never()).execute(eq(Integer.valueOf(11)), eq(Integer.valueOf(11)), eq(11), eq(11.0), eq(11));
    verify(action5, never()).execute(eq(Integer.valueOf(12)), eq(Integer.valueOf(12)), eq(12), eq(12.0), eq(12.0));
    verify(action5, never()).execute(eq(Integer.valueOf(13)), eq(Integer.valueOf(13)), eq(13.0), eq(13), eq(13));
    verify(action5, never()).execute(eq(Integer.valueOf(14)), eq(Integer.valueOf(14)), eq(14.0), eq(14), eq(14.0));
    verify(action5, never()).execute(eq(Integer.valueOf(15)), eq(Integer.valueOf(15)), eq(15.0), eq(15.0), eq(15));
    verify(action5, never()).execute(eq(Integer.valueOf(16)), eq(Integer.valueOf(16)), eq(16.0), eq(16.0), eq(16.0));
    verify(action5, never()).execute(eq(Integer.valueOf(17)), eq(17), eq(17), eq(17), eq(17));
    verify(action5, never()).execute(eq(Integer.valueOf(18)), eq(18), eq(18), eq(18), eq(18.0));
    verify(action5, never()).execute(eq(Integer.valueOf(19)), eq(19), eq(19), eq(19.0), eq(19));
    verify(action5, never()).execute(eq(Integer.valueOf(20)), eq(20), eq(20), eq(20.0), eq(20.0));
    verify(action5, never()).execute(eq(Integer.valueOf(21)), eq(21), eq(21.0), eq(21), eq(21));
    verify(action5, never()).execute(eq(Integer.valueOf(22)), eq(22), eq(22.0), eq(22), eq(22.0));
    verify(action5, never()).execute(eq(Integer.valueOf(23)), eq(23), eq(23.0), eq(23.0), eq(23));
    verify(action5, never()).execute(eq(Integer.valueOf(24)), eq(24), eq(24.0), eq(24.0), eq(24.0));
    verify(action5, never()).execute(eq(Integer.valueOf(25)), eq(25.0), eq(25), eq(25), eq(25));
    verify(action5, never()).execute(eq(Integer.valueOf(26)), eq(26.0), eq(26), eq(26), eq(26.0));
    verify(action5, never()).execute(eq(Integer.valueOf(27)), eq(27.0), eq(27), eq(27.0), eq(27));
    verify(action5, never()).execute(eq(Integer.valueOf(28)), eq(28.0), eq(28), eq(28.0), eq(28.0));
    verify(action5, never()).execute(eq(Integer.valueOf(29)), eq(29.0), eq(29.0), eq(29), eq(29));
    verify(action5, never()).execute(eq(Integer.valueOf(30)), eq(30.0), eq(30.0), eq(30), eq(30.0));
    verify(action5, never()).execute(eq(Integer.valueOf(31)), eq(31.0), eq(31.0), eq(31.0), eq(31));
    verify(action5, never()).execute(eq(Integer.valueOf(32)), eq(32.0), eq(32.0), eq(32.0), eq(32.0));
    verify(action5, never()).execute(eq(33), eq(33), eq(33), eq(33), eq(33));
    verify(action5, never()).execute(eq(34), eq(34), eq(34), eq(34), eq(34.0));
    verify(action5, never()).execute(eq(35), eq(35), eq(35), eq(35.0), eq(35));
    verify(action5, never()).execute(eq(36), eq(36), eq(36), eq(36.0), eq(36.0));
    verify(action5, never()).execute(eq(37), eq(37), eq(37.0), eq(37), eq(37));
    verify(action5, never()).execute(eq(38), eq(38), eq(38.0), eq(38), eq(38.0));
    verify(action5, never()).execute(eq(39), eq(39), eq(39.00), eq(39.0), eq(39));
    verify(action5, never()).execute(eq(40), eq(40), eq(40.0), eq(40.0), eq(40.0));
    verify(action5, never()).execute(eq(41), eq(41.0), eq(41), eq(41), eq(41));
    verify(action5, never()).execute(eq(42), eq(42.0), eq(42), eq(42), eq(42.0));
    verify(action5, never()).execute(eq(43), eq(43.0), eq(43), eq(43.0), eq(43));
    verify(action5, never()).execute(eq(44), eq(44.0), eq(44), eq(44.0), eq(44.0));
    verify(action5, never()).execute(eq(45), eq(45.0), eq(45.0), eq(45), eq(45));
    verify(action5, never()).execute(eq(46), eq(46.0), eq(46.0), eq(46), eq(46.0));
    verify(action5, never()).execute(eq(47), eq(47.0), eq(47.0), eq(47.0), eq(47));
    verify(action5, never()).execute(eq(48), eq(48.0), eq(48.0), eq(48.0), eq(48.0));
    verify(action5, never()).execute(eq(49.0), eq(49), eq(49), eq(49), eq(49));
    verify(action5, never()).execute(eq(50.0), eq(50), eq(50), eq(50), eq(50.0));
    verify(action5, never()).execute(eq(51.0), eq(51), eq(51), eq(51.0), eq(51));
    verify(action5, never()).execute(eq(52.0), eq(52), eq(52), eq(52.0), eq(52.0));
    verify(action5, never()).execute(eq(53.0), eq(53), eq(53.0), eq(53), eq(53));
    verify(action5, never()).execute(eq(54.0), eq(54), eq(54.0), eq(54), eq(54.0));
    verify(action5, never()).execute(eq(55.0), eq(55), eq(55.0), eq(55.0), eq(55));
    verify(action5, never()).execute(eq(56.0), eq(56), eq(56.0), eq(56.0), eq(56.0));
    verify(action5, never()).execute(eq(57.0), eq(57.0), eq(57), eq(57), eq(57));
    verify(action5, never()).execute(eq(58.0), eq(58.0), eq(58), eq(58), eq(58.0));
    verify(action5, never()).execute(eq(59.0), eq(59.0), eq(59), eq(59.0), eq(59));
    verify(action5, never()).execute(eq(60.0), eq(60.0), eq(60), eq(60.0), eq(60.0));
    verify(action5, never()).execute(eq(61.0), eq(61.0), eq(61.0), eq(61), eq(61));
    verify(action5, never()).execute(eq(62.0), eq(62.0), eq(62.0), eq(62), eq(62.0));
    verify(action5, never()).execute(eq(63.0), eq(63.0), eq(63.0), eq(63.0), eq(630));
    verify(action5, never()).execute(eq(64.0), eq(64.0), eq(64.0), eq(64.0), eq(64.0));

    assertThat(list).containsExactly(5.0);

    assertThat(interceptor.wrappedAction()).isSameAs(action5);
  }

  @Test
  public void testExecuteReturnInt() {
    // Given
    List<Double> list = new ArrayList<>();
    Action5<Integer, Number, Number, Number, Number, Number> action5 = spy(Actions.get(
        (Number n1, Number n2, Number n3, Number n4, Number n5) -> booleanToInt(addSumToList(list, n1, n2, n3, n4, n5)))
    );
    var interceptor = new SkipFollowingTimesInterceptor5<>(action5, -1);

    // When
    int result1 = interceptor.executeReturnInt(Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1));
    int result2 = interceptor.executeReturnInt(Integer.valueOf(2), Integer.valueOf(2), Integer.valueOf(2), Integer.valueOf(2), Integer.valueOf(2));
    int result3 = interceptor.executeReturnInt(Integer.valueOf(3), Integer.valueOf(3), Integer.valueOf(3), Integer.valueOf(3), 3);
    int result4 = interceptor.executeReturnInt(Integer.valueOf(4), Integer.valueOf(4), Integer.valueOf(4), Integer.valueOf(4), 4.0);
    int result5 = interceptor.executeReturnInt(Integer.valueOf(5), Integer.valueOf(5), Integer.valueOf(5), 5, 5);
    int result6 = interceptor.executeReturnInt(Integer.valueOf(6), Integer.valueOf(6), Integer.valueOf(6), 6, 6.0);
    int result7 = interceptor.executeReturnInt(Integer.valueOf(7), Integer.valueOf(7), Integer.valueOf(7), 7.0, 7);
    int result8 = interceptor.executeReturnInt(Integer.valueOf(8), Integer.valueOf(8), Integer.valueOf(8), 8.0, 8.0);
    int result9 = interceptor.executeReturnInt(Integer.valueOf(9), Integer.valueOf(9), 9, 9, 9);
    int result10 = interceptor.executeReturnInt(Integer.valueOf(10), Integer.valueOf(10), 10, 10, 10.0);
    int result11 = interceptor.executeReturnInt(Integer.valueOf(11), Integer.valueOf(11), 11, 11.0, 11);
    int result12 = interceptor.executeReturnInt(Integer.valueOf(12), Integer.valueOf(12), 12, 12.0, 12.0);
    int result13 = interceptor.executeReturnInt(Integer.valueOf(13), Integer.valueOf(13), 13.0, 13, 13);
    int result14 = interceptor.executeReturnInt(Integer.valueOf(14), Integer.valueOf(14), 14.0, 14, 14.0);
    int result15 = interceptor.executeReturnInt(Integer.valueOf(15), Integer.valueOf(15), 15.0, 15.0, 15);
    int result16 = interceptor.executeReturnInt(Integer.valueOf(16), Integer.valueOf(16), 16.0, 16.0, 16.0);
    int result17 = interceptor.executeReturnInt(Integer.valueOf(17), 17, 17, 17, 17);
    int result18 = interceptor.executeReturnInt(Integer.valueOf(18), 18, 18, 18, 18.0);
    int result19 = interceptor.executeReturnInt(Integer.valueOf(19), 19, 19, 19.0, 19);
    int result20 = interceptor.executeReturnInt(Integer.valueOf(20), 20, 20, 20.0, 20.0);
    int result21 = interceptor.executeReturnInt(Integer.valueOf(21), 21, 21.0, 21,21);
    int result22 = interceptor.executeReturnInt(Integer.valueOf(22), 22, 22.0, 22, 22.0);
    int result23 = interceptor.executeReturnInt(Integer.valueOf(23), 23, 23.0, 23.0, 23);
    int result24 = interceptor.executeReturnInt(Integer.valueOf(24), 24, 24.0, 24.0, 24.0);
    int result25 = interceptor.executeReturnInt(Integer.valueOf(25), 25.0, 25, 25, 25);
    int result26 = interceptor.executeReturnInt(Integer.valueOf(26), 26.0, 26, 26, 26.0);
    int result27 = interceptor.executeReturnInt(Integer.valueOf(27), 27.0, 27, 27.0, 27);
    int result28 = interceptor.executeReturnInt(Integer.valueOf(28), 28.0, 28, 28.0, 28.0);
    int result29 = interceptor.executeReturnInt(Integer.valueOf(29), 29.0, 29.0, 29, 29);
    int result30 = interceptor.executeReturnInt(Integer.valueOf(30), 30.0, 30.0, 30, 30.0);
    int result31 = interceptor.executeReturnInt(Integer.valueOf(31), 31.0, 31.0, 31.0, 31);
    int result32 = interceptor.executeReturnInt(Integer.valueOf(32), 32.0, 32.0, 32.0, 32.0);
    int result33 = interceptor.executeReturnInt(33, 33, 33, 33, 33);
    int result34 = interceptor.executeReturnInt(34, 34, 34, 34, 34.0);
    int result35 = interceptor.executeReturnInt(35, 35, 35, 35.0, 35);
    int result36 = interceptor.executeReturnInt(36, 36, 36, 36.0, 36.0);
    int result37 = interceptor.executeReturnInt(37, 37, 37.0, 37, 37);
    int result38 = interceptor.executeReturnInt(38, 38, 38.0, 38, 38.0);
    int result39 = interceptor.executeReturnInt(39, 39, 39.00, 39.0, 39);
    int result40 = interceptor.executeReturnInt(40, 40, 40.0, 40.0, 40.0);
    int result41 = interceptor.executeReturnInt(41, 41.0, 41, 41, 41);
    int result42 = interceptor.executeReturnInt(42, 42.0, 42, 42, 42.0);
    int result43 = interceptor.executeReturnInt(43, 43.0, 43, 43.0, 43);
    int result44 = interceptor.executeReturnInt(44, 44.0, 44, 44.0, 44.0);
    int result45 = interceptor.executeReturnInt(45, 45.0, 45.0, 45, 45);
    int result46 = interceptor.executeReturnInt(46, 46.0, 46.0, 46, 46.0);
    int result47 = interceptor.executeReturnInt(47, 47.0, 47.0, 47.0, 47);
    int result48 = interceptor.executeReturnInt(48, 48.0, 48.0, 48.0, 48.0);
    int result49 = interceptor.executeReturnInt(49.0, 49, 49, 49, 49);
    int result50 = interceptor.executeReturnInt(50.0, 50, 50, 50, 50.0);
    int result51 = interceptor.executeReturnInt(51.0, 51, 51, 51.0, 51);
    int result52 = interceptor.executeReturnInt(52.0, 52, 52, 52.0, 52.0);
    int result53 = interceptor.executeReturnInt(53.0, 53, 53.0, 53, 53);
    int result54 = interceptor.executeReturnInt(54.0, 54, 54.0, 54, 54.0);
    int result55 = interceptor.executeReturnInt(55.0, 55, 55.0, 55.0, 55);
    int result56 = interceptor.executeReturnInt(56.0, 56, 56.0, 56.0, 56.0);
    int result57 = interceptor.executeReturnInt(57.0, 57.0, 57, 57, 57);
    int result58 = interceptor.executeReturnInt(58.0, 58.0, 58, 58, 58.0);
    int result59 = interceptor.executeReturnInt(59.0, 59.0, 59, 59.0, 59);
    int result60 = interceptor.executeReturnInt(60.0, 60.0, 60, 60.0, 60.0);
    int result61 = interceptor.executeReturnInt(61.0, 61.0, 61.0, 61, 61);
    int result62 = interceptor.executeReturnInt(62.0, 62.0, 62.0, 62, 62.0);
    int result63 = interceptor.executeReturnInt(63.0, 63.0, 63.0, 63.0, 63);
    int result64 = interceptor.executeReturnInt(64.0, 64.0, 64.0, 64.0, 64.0);

    // Then
    assertThat(result1).isEqualTo(1);
    assertThat(result2).isEqualTo(-1);
    assertThat(result3).isEqualTo(-1);
    assertThat(result4).isEqualTo(-1);
    assertThat(result5).isEqualTo(-1);
    assertThat(result6).isEqualTo(-1);
    assertThat(result7).isEqualTo(-1);
    assertThat(result8).isEqualTo(-1);
    assertThat(result9).isEqualTo(-1);
    assertThat(result10).isEqualTo(-1);
    assertThat(result11).isEqualTo(-1);
    assertThat(result12).isEqualTo(-1);
    assertThat(result13).isEqualTo(-1);
    assertThat(result14).isEqualTo(-1);
    assertThat(result15).isEqualTo(-1);
    assertThat(result16).isEqualTo(-1);
    assertThat(result17).isEqualTo(-1);
    assertThat(result18).isEqualTo(-1);
    assertThat(result19).isEqualTo(-1);
    assertThat(result20).isEqualTo(-1);
    assertThat(result21).isEqualTo(-1);
    assertThat(result22).isEqualTo(-1);
    assertThat(result23).isEqualTo(-1);
    assertThat(result24).isEqualTo(-1);
    assertThat(result25).isEqualTo(-1);
    assertThat(result26).isEqualTo(-1);
    assertThat(result27).isEqualTo(-1);
    assertThat(result28).isEqualTo(-1);
    assertThat(result29).isEqualTo(-1);
    assertThat(result30).isEqualTo(-1);
    assertThat(result31).isEqualTo(-1);
    assertThat(result32).isEqualTo(-1);
    assertThat(result33).isEqualTo(-1);
    assertThat(result34).isEqualTo(-1);
    assertThat(result35).isEqualTo(-1);
    assertThat(result36).isEqualTo(-1);
    assertThat(result37).isEqualTo(-1);
    assertThat(result38).isEqualTo(-1);
    assertThat(result39).isEqualTo(-1);
    assertThat(result40).isEqualTo(-1);
    assertThat(result41).isEqualTo(-1);
    assertThat(result42).isEqualTo(-1);
    assertThat(result43).isEqualTo(-1);
    assertThat(result44).isEqualTo(-1);
    assertThat(result45).isEqualTo(-1);
    assertThat(result46).isEqualTo(-1);
    assertThat(result47).isEqualTo(-1);
    assertThat(result48).isEqualTo(-1);
    assertThat(result49).isEqualTo(-1);
    assertThat(result50).isEqualTo(-1);
    assertThat(result51).isEqualTo(-1);
    assertThat(result52).isEqualTo(-1);
    assertThat(result53).isEqualTo(-1);
    assertThat(result54).isEqualTo(-1);
    assertThat(result55).isEqualTo(-1);
    assertThat(result56).isEqualTo(-1);
    assertThat(result57).isEqualTo(-1);
    assertThat(result58).isEqualTo(-1);
    assertThat(result59).isEqualTo(-1);
    assertThat(result60).isEqualTo(-1);
    assertThat(result61).isEqualTo(-1);
    assertThat(result62).isEqualTo(-1);
    assertThat(result63).isEqualTo(-1);
    assertThat(result64).isEqualTo(-1);

    verify(action5, times(1)).executeReturnInt(eq(Integer.valueOf(1)), eq(Integer.valueOf(1)), eq(Integer.valueOf(1)), eq(Integer.valueOf(1)), eq(Integer.valueOf(1)));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(2)), eq(Integer.valueOf(2)), eq(Integer.valueOf(2)), eq(Integer.valueOf(2)), eq(Integer.valueOf(2)));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(3)), eq(Integer.valueOf(3)), eq(Integer.valueOf(3)), eq(Integer.valueOf(3)), eq(3));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(4)), eq(Integer.valueOf(4)), eq(Integer.valueOf(4)), eq(Integer.valueOf(4)), eq(4.0));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(5)), eq(Integer.valueOf(5)), eq(Integer.valueOf(5)), eq(5), eq(5));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(6)), eq(Integer.valueOf(6)), eq(Integer.valueOf(6)), eq(6), eq(6.0));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(7)), eq(Integer.valueOf(7)), eq(Integer.valueOf(7)), eq(7.0), eq(7));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(8)), eq(Integer.valueOf(8)), eq(Integer.valueOf(8)), eq(8.0), eq(8.0));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(9)), eq(Integer.valueOf(9)), eq(9), eq(9), eq(9));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(10)), eq(Integer.valueOf(10)), eq(10), eq(10), eq(10.0));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(11)), eq(Integer.valueOf(11)), eq(11), eq(11.0), eq(11));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(12)), eq(Integer.valueOf(12)), eq(12), eq(12.0), eq(12.0));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(13)), eq(Integer.valueOf(13)), eq(13.0), eq(13), eq(13));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(14)), eq(Integer.valueOf(14)), eq(14.0), eq(14), eq(14.0));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(15)), eq(Integer.valueOf(15)), eq(15.0), eq(15.0), eq(15));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(16)), eq(Integer.valueOf(16)), eq(16.0), eq(16.0), eq(16.0));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(17)), eq(17), eq(17), eq(17), eq(17));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(18)), eq(18), eq(18), eq(18), eq(18.0));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(19)), eq(19), eq(19), eq(19.0), eq(19));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(20)), eq(20), eq(20), eq(20.0), eq(20.0));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(21)), eq(21), eq(21.0), eq(21), eq(21));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(22)), eq(22), eq(22.0), eq(22), eq(22.0));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(23)), eq(23), eq(23.0), eq(23.0), eq(23));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(24)), eq(24), eq(24.0), eq(24.0), eq(24.0));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(25)), eq(25.0), eq(25), eq(25), eq(25));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(26)), eq(26.0), eq(26), eq(26), eq(26.0));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(27)), eq(27.0), eq(27), eq(27.0), eq(27));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(28)), eq(28.0), eq(28), eq(28.0), eq(28.0));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(29)), eq(29.0), eq(29.0), eq(29), eq(29));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(30)), eq(30.0), eq(30.0), eq(30), eq(30.0));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(31)), eq(31.0), eq(31.0), eq(31.0), eq(31));
    verify(action5, never()).executeReturnInt(eq(Integer.valueOf(32)), eq(32.0), eq(32.0), eq(32.0), eq(32.0));
    verify(action5, never()).executeReturnInt(eq(33), eq(33), eq(33), eq(33), eq(33));
    verify(action5, never()).executeReturnInt(eq(34), eq(34), eq(34), eq(34), eq(34.0));
    verify(action5, never()).executeReturnInt(eq(35), eq(35), eq(35), eq(35.0), eq(35));
    verify(action5, never()).executeReturnInt(eq(36), eq(36), eq(36), eq(36.0), eq(36.0));
    verify(action5, never()).executeReturnInt(eq(37), eq(37), eq(37.0), eq(37), eq(37));
    verify(action5, never()).executeReturnInt(eq(38), eq(38), eq(38.0), eq(38), eq(38.0));
    verify(action5, never()).executeReturnInt(eq(39), eq(39), eq(39.00), eq(39.0), eq(39));
    verify(action5, never()).executeReturnInt(eq(40), eq(40), eq(40.0), eq(40.0), eq(40.0));
    verify(action5, never()).executeReturnInt(eq(41), eq(41.0), eq(41), eq(41), eq(41));
    verify(action5, never()).executeReturnInt(eq(42), eq(42.0), eq(42), eq(42), eq(42.0));
    verify(action5, never()).executeReturnInt(eq(43), eq(43.0), eq(43), eq(43.0), eq(43));
    verify(action5, never()).executeReturnInt(eq(44), eq(44.0), eq(44), eq(44.0), eq(44.0));
    verify(action5, never()).executeReturnInt(eq(45), eq(45.0), eq(45.0), eq(45), eq(45));
    verify(action5, never()).executeReturnInt(eq(46), eq(46.0), eq(46.0), eq(46), eq(46.0));
    verify(action5, never()).executeReturnInt(eq(47), eq(47.0), eq(47.0), eq(47.0), eq(47));
    verify(action5, never()).executeReturnInt(eq(48), eq(48.0), eq(48.0), eq(48.0), eq(48.0));
    verify(action5, never()).executeReturnInt(eq(49.0), eq(49), eq(49), eq(49), eq(49));
    verify(action5, never()).executeReturnInt(eq(50.0), eq(50), eq(50), eq(50), eq(50.0));
    verify(action5, never()).executeReturnInt(eq(51.0), eq(51), eq(51), eq(51.0), eq(51));
    verify(action5, never()).executeReturnInt(eq(52.0), eq(52), eq(52), eq(52.0), eq(52.0));
    verify(action5, never()).executeReturnInt(eq(53.0), eq(53), eq(53.0), eq(53), eq(53));
    verify(action5, never()).executeReturnInt(eq(54.0), eq(54), eq(54.0), eq(54), eq(54.0));
    verify(action5, never()).executeReturnInt(eq(55.0), eq(55), eq(55.0), eq(55.0), eq(55));
    verify(action5, never()).executeReturnInt(eq(56.0), eq(56), eq(56.0), eq(56.0), eq(56.0));
    verify(action5, never()).executeReturnInt(eq(57.0), eq(57.0), eq(57), eq(57), eq(57));
    verify(action5, never()).executeReturnInt(eq(58.0), eq(58.0), eq(58), eq(58), eq(58.0));
    verify(action5, never()).executeReturnInt(eq(59.0), eq(59.0), eq(59), eq(59.0), eq(59));
    verify(action5, never()).executeReturnInt(eq(60.0), eq(60.0), eq(60), eq(60.0), eq(60.0));
    verify(action5, never()).executeReturnInt(eq(61.0), eq(61.0), eq(61.0), eq(61), eq(61));
    verify(action5, never()).executeReturnInt(eq(62.0), eq(62.0), eq(62.0), eq(62), eq(62.0));
    verify(action5, never()).executeReturnInt(eq(63.0), eq(63.0), eq(63.0), eq(63.0), eq(630));
    verify(action5, never()).executeReturnInt(eq(64.0), eq(64.0), eq(64.0), eq(64.0), eq(64.0));

    assertThat(list).containsExactly(5.0);

    assertThat(interceptor.wrappedAction()).isSameAs(action5);
  }

  @Test
  public void testExecuteReturnDouble() {
    // Given
    List<Double> list = new ArrayList<>();
    Action5<Double, Number, Number, Number, Number, Number> action5 = spy(Actions.get(
        (Number n1, Number n2, Number n3, Number n4, Number n5) -> booleanToDouble(addSumToList(list, n1, n2, n3, n4, n5)))
    );
    var interceptor = new SkipFollowingTimesInterceptor5<>(action5, -1.0);

    // When
    double result1 = interceptor.executeReturnDouble(Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1));
    double result2 = interceptor.executeReturnDouble(Integer.valueOf(2), Integer.valueOf(2), Integer.valueOf(2), Integer.valueOf(2), Integer.valueOf(2));
    double result3 = interceptor.executeReturnDouble(Integer.valueOf(3), Integer.valueOf(3), Integer.valueOf(3), Integer.valueOf(3), 3);
    double result4 = interceptor.executeReturnDouble(Integer.valueOf(4), Integer.valueOf(4), Integer.valueOf(4), Integer.valueOf(4), 4.0);
    double result5 = interceptor.executeReturnDouble(Integer.valueOf(5), Integer.valueOf(5), Integer.valueOf(5), 5, 5);
    double result6 = interceptor.executeReturnDouble(Integer.valueOf(6), Integer.valueOf(6), Integer.valueOf(6), 6, 6.0);
    double result7 = interceptor.executeReturnDouble(Integer.valueOf(7), Integer.valueOf(7), Integer.valueOf(7), 7.0, 7);
    double result8 = interceptor.executeReturnDouble(Integer.valueOf(8), Integer.valueOf(8), Integer.valueOf(8), 8.0, 8.0);
    double result9 = interceptor.executeReturnDouble(Integer.valueOf(9), Integer.valueOf(9), 9, 9, 9);
    double result10 = interceptor.executeReturnDouble(Integer.valueOf(10), Integer.valueOf(10), 10, 10, 10.0);
    double result11 = interceptor.executeReturnDouble(Integer.valueOf(11), Integer.valueOf(11), 11, 11.0, 11);
    double result12 = interceptor.executeReturnDouble(Integer.valueOf(12), Integer.valueOf(12), 12, 12.0, 12.0);
    double result13 = interceptor.executeReturnDouble(Integer.valueOf(13), Integer.valueOf(13), 13.0, 13, 13);
    double result14 = interceptor.executeReturnDouble(Integer.valueOf(14), Integer.valueOf(14), 14.0, 14, 14.0);
    double result15 = interceptor.executeReturnDouble(Integer.valueOf(15), Integer.valueOf(15), 15.0, 15.0, 15);
    double result16 = interceptor.executeReturnDouble(Integer.valueOf(16), Integer.valueOf(16), 16.0, 16.0, 16.0);
    double result17 = interceptor.executeReturnDouble(Integer.valueOf(17), 17, 17, 17, 17);
    double result18 = interceptor.executeReturnDouble(Integer.valueOf(18), 18, 18, 18, 18.0);
    double result19 = interceptor.executeReturnDouble(Integer.valueOf(19), 19, 19, 19.0, 19);
    double result20 = interceptor.executeReturnDouble(Integer.valueOf(20), 20, 20, 20.0, 20.0);
    double result21 = interceptor.executeReturnDouble(Integer.valueOf(21), 21, 21.0, 21,21);
    double result22 = interceptor.executeReturnDouble(Integer.valueOf(22), 22, 22.0, 22, 22.0);
    double result23 = interceptor.executeReturnDouble(Integer.valueOf(23), 23, 23.0, 23.0, 23);
    double result24 = interceptor.executeReturnDouble(Integer.valueOf(24), 24, 24.0, 24.0, 24.0);
    double result25 = interceptor.executeReturnDouble(Integer.valueOf(25), 25.0, 25, 25, 25);
    double result26 = interceptor.executeReturnDouble(Integer.valueOf(26), 26.0, 26, 26, 26.0);
    double result27 = interceptor.executeReturnDouble(Integer.valueOf(27), 27.0, 27, 27.0, 27);
    double result28 = interceptor.executeReturnDouble(Integer.valueOf(28), 28.0, 28, 28.0, 28.0);
    double result29 = interceptor.executeReturnDouble(Integer.valueOf(29), 29.0, 29.0, 29, 29);
    double result30 = interceptor.executeReturnDouble(Integer.valueOf(30), 30.0, 30.0, 30, 30.0);
    double result31 = interceptor.executeReturnDouble(Integer.valueOf(31), 31.0, 31.0, 31.0, 31);
    double result32 = interceptor.executeReturnDouble(Integer.valueOf(32), 32.0, 32.0, 32.0, 32.0);
    double result33 = interceptor.executeReturnDouble(33, 33, 33, 33, 33);
    double result34 = interceptor.executeReturnDouble(34, 34, 34, 34, 34.0);
    double result35 = interceptor.executeReturnDouble(35, 35, 35, 35.0, 35);
    double result36 = interceptor.executeReturnDouble(36, 36, 36, 36.0, 36.0);
    double result37 = interceptor.executeReturnDouble(37, 37, 37.0, 37, 37);
    double result38 = interceptor.executeReturnDouble(38, 38, 38.0, 38, 38.0);
    double result39 = interceptor.executeReturnDouble(39, 39, 39.00, 39.0, 39);
    double result40 = interceptor.executeReturnDouble(40, 40, 40.0, 40.0, 40.0);
    double result41 = interceptor.executeReturnDouble(41, 41.0, 41, 41, 41);
    double result42 = interceptor.executeReturnDouble(42, 42.0, 42, 42, 42.0);
    double result43 = interceptor.executeReturnDouble(43, 43.0, 43, 43.0, 43);
    double result44 = interceptor.executeReturnDouble(44, 44.0, 44, 44.0, 44.0);
    double result45 = interceptor.executeReturnDouble(45, 45.0, 45.0, 45, 45);
    double result46 = interceptor.executeReturnDouble(46, 46.0, 46.0, 46, 46.0);
    double result47 = interceptor.executeReturnDouble(47, 47.0, 47.0, 47.0, 47);
    double result48 = interceptor.executeReturnDouble(48, 48.0, 48.0, 48.0, 48.0);
    double result49 = interceptor.executeReturnDouble(49.0, 49, 49, 49, 49);
    double result50 = interceptor.executeReturnDouble(50.0, 50, 50, 50, 50.0);
    double result51 = interceptor.executeReturnDouble(51.0, 51, 51, 51.0, 51);
    double result52 = interceptor.executeReturnDouble(52.0, 52, 52, 52.0, 52.0);
    double result53 = interceptor.executeReturnDouble(53.0, 53, 53.0, 53, 53);
    double result54 = interceptor.executeReturnDouble(54.0, 54, 54.0, 54, 54.0);
    double result55 = interceptor.executeReturnDouble(55.0, 55, 55.0, 55.0, 55);
    double result56 = interceptor.executeReturnDouble(56.0, 56, 56.0, 56.0, 56.0);
    double result57 = interceptor.executeReturnDouble(57.0, 57.0, 57, 57, 57);
    double result58 = interceptor.executeReturnDouble(58.0, 58.0, 58, 58, 58.0);
    double result59 = interceptor.executeReturnDouble(59.0, 59.0, 59, 59.0, 59);
    double result60 = interceptor.executeReturnDouble(60.0, 60.0, 60, 60.0, 60.0);
    double result61 = interceptor.executeReturnDouble(61.0, 61.0, 61.0, 61, 61);
    double result62 = interceptor.executeReturnDouble(62.0, 62.0, 62.0, 62, 62.0);
    double result63 = interceptor.executeReturnDouble(63.0, 63.0, 63.0, 63.0, 63);
    double result64 = interceptor.executeReturnDouble(64.0, 64.0, 64.0, 64.0, 64.0);

    // Then
    assertThat(result1).isEqualTo(1);
    assertThat(result2).isEqualTo(-1);
    assertThat(result3).isEqualTo(-1);
    assertThat(result4).isEqualTo(-1);
    assertThat(result5).isEqualTo(-1);
    assertThat(result6).isEqualTo(-1);
    assertThat(result7).isEqualTo(-1);
    assertThat(result8).isEqualTo(-1);
    assertThat(result9).isEqualTo(-1);
    assertThat(result10).isEqualTo(-1);
    assertThat(result11).isEqualTo(-1);
    assertThat(result12).isEqualTo(-1);
    assertThat(result13).isEqualTo(-1);
    assertThat(result14).isEqualTo(-1);
    assertThat(result15).isEqualTo(-1);
    assertThat(result16).isEqualTo(-1);
    assertThat(result17).isEqualTo(-1);
    assertThat(result18).isEqualTo(-1);
    assertThat(result19).isEqualTo(-1);
    assertThat(result20).isEqualTo(-1);
    assertThat(result21).isEqualTo(-1);
    assertThat(result22).isEqualTo(-1);
    assertThat(result23).isEqualTo(-1);
    assertThat(result24).isEqualTo(-1);
    assertThat(result25).isEqualTo(-1);
    assertThat(result26).isEqualTo(-1);
    assertThat(result27).isEqualTo(-1);
    assertThat(result28).isEqualTo(-1);
    assertThat(result29).isEqualTo(-1);
    assertThat(result30).isEqualTo(-1);
    assertThat(result31).isEqualTo(-1);
    assertThat(result32).isEqualTo(-1);
    assertThat(result33).isEqualTo(-1);
    assertThat(result34).isEqualTo(-1);
    assertThat(result35).isEqualTo(-1);
    assertThat(result36).isEqualTo(-1);
    assertThat(result37).isEqualTo(-1);
    assertThat(result38).isEqualTo(-1);
    assertThat(result39).isEqualTo(-1);
    assertThat(result40).isEqualTo(-1);
    assertThat(result41).isEqualTo(-1);
    assertThat(result42).isEqualTo(-1);
    assertThat(result43).isEqualTo(-1);
    assertThat(result44).isEqualTo(-1);
    assertThat(result45).isEqualTo(-1);
    assertThat(result46).isEqualTo(-1);
    assertThat(result47).isEqualTo(-1);
    assertThat(result48).isEqualTo(-1);
    assertThat(result49).isEqualTo(-1);
    assertThat(result50).isEqualTo(-1);
    assertThat(result51).isEqualTo(-1);
    assertThat(result52).isEqualTo(-1);
    assertThat(result53).isEqualTo(-1);
    assertThat(result54).isEqualTo(-1);
    assertThat(result55).isEqualTo(-1);
    assertThat(result56).isEqualTo(-1);
    assertThat(result57).isEqualTo(-1);
    assertThat(result58).isEqualTo(-1);
    assertThat(result59).isEqualTo(-1);
    assertThat(result60).isEqualTo(-1);
    assertThat(result61).isEqualTo(-1);
    assertThat(result62).isEqualTo(-1);
    assertThat(result63).isEqualTo(-1);
    assertThat(result64).isEqualTo(-1);

    verify(action5, times(1)).executeReturnDouble(eq(Integer.valueOf(1)), eq(Integer.valueOf(1)), eq(Integer.valueOf(1)), eq(Integer.valueOf(1)), eq(Integer.valueOf(1)));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(2)), eq(Integer.valueOf(2)), eq(Integer.valueOf(2)), eq(Integer.valueOf(2)), eq(Integer.valueOf(2)));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(3)), eq(Integer.valueOf(3)), eq(Integer.valueOf(3)), eq(Integer.valueOf(3)), eq(3));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(4)), eq(Integer.valueOf(4)), eq(Integer.valueOf(4)), eq(Integer.valueOf(4)), eq(4.0));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(5)), eq(Integer.valueOf(5)), eq(Integer.valueOf(5)), eq(5), eq(5));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(6)), eq(Integer.valueOf(6)), eq(Integer.valueOf(6)), eq(6), eq(6.0));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(7)), eq(Integer.valueOf(7)), eq(Integer.valueOf(7)), eq(7.0), eq(7));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(8)), eq(Integer.valueOf(8)), eq(Integer.valueOf(8)), eq(8.0), eq(8.0));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(9)), eq(Integer.valueOf(9)), eq(9), eq(9), eq(9));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(10)), eq(Integer.valueOf(10)), eq(10), eq(10), eq(10.0));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(11)), eq(Integer.valueOf(11)), eq(11), eq(11.0), eq(11));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(12)), eq(Integer.valueOf(12)), eq(12), eq(12.0), eq(12.0));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(13)), eq(Integer.valueOf(13)), eq(13.0), eq(13), eq(13));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(14)), eq(Integer.valueOf(14)), eq(14.0), eq(14), eq(14.0));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(15)), eq(Integer.valueOf(15)), eq(15.0), eq(15.0), eq(15));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(16)), eq(Integer.valueOf(16)), eq(16.0), eq(16.0), eq(16.0));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(17)), eq(17), eq(17), eq(17), eq(17));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(18)), eq(18), eq(18), eq(18), eq(18.0));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(19)), eq(19), eq(19), eq(19.0), eq(19));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(20)), eq(20), eq(20), eq(20.0), eq(20.0));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(21)), eq(21), eq(21.0), eq(21), eq(21));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(22)), eq(22), eq(22.0), eq(22), eq(22.0));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(23)), eq(23), eq(23.0), eq(23.0), eq(23));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(24)), eq(24), eq(24.0), eq(24.0), eq(24.0));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(25)), eq(25.0), eq(25), eq(25), eq(25));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(26)), eq(26.0), eq(26), eq(26), eq(26.0));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(27)), eq(27.0), eq(27), eq(27.0), eq(27));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(28)), eq(28.0), eq(28), eq(28.0), eq(28.0));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(29)), eq(29.0), eq(29.0), eq(29), eq(29));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(30)), eq(30.0), eq(30.0), eq(30), eq(30.0));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(31)), eq(31.0), eq(31.0), eq(31.0), eq(31));
    verify(action5, never()).executeReturnDouble(eq(Integer.valueOf(32)), eq(32.0), eq(32.0), eq(32.0), eq(32.0));
    verify(action5, never()).executeReturnDouble(eq(33), eq(33), eq(33), eq(33), eq(33));
    verify(action5, never()).executeReturnDouble(eq(34), eq(34), eq(34), eq(34), eq(34.0));
    verify(action5, never()).executeReturnDouble(eq(35), eq(35), eq(35), eq(35.0), eq(35));
    verify(action5, never()).executeReturnDouble(eq(36), eq(36), eq(36), eq(36.0), eq(36.0));
    verify(action5, never()).executeReturnDouble(eq(37), eq(37), eq(37.0), eq(37), eq(37));
    verify(action5, never()).executeReturnDouble(eq(38), eq(38), eq(38.0), eq(38), eq(38.0));
    verify(action5, never()).executeReturnDouble(eq(39), eq(39), eq(39.00), eq(39.0), eq(39));
    verify(action5, never()).executeReturnDouble(eq(40), eq(40), eq(40.0), eq(40.0), eq(40.0));
    verify(action5, never()).executeReturnDouble(eq(41), eq(41.0), eq(41), eq(41), eq(41));
    verify(action5, never()).executeReturnDouble(eq(42), eq(42.0), eq(42), eq(42), eq(42.0));
    verify(action5, never()).executeReturnDouble(eq(43), eq(43.0), eq(43), eq(43.0), eq(43));
    verify(action5, never()).executeReturnDouble(eq(44), eq(44.0), eq(44), eq(44.0), eq(44.0));
    verify(action5, never()).executeReturnDouble(eq(45), eq(45.0), eq(45.0), eq(45), eq(45));
    verify(action5, never()).executeReturnDouble(eq(46), eq(46.0), eq(46.0), eq(46), eq(46.0));
    verify(action5, never()).executeReturnDouble(eq(47), eq(47.0), eq(47.0), eq(47.0), eq(47));
    verify(action5, never()).executeReturnDouble(eq(48), eq(48.0), eq(48.0), eq(48.0), eq(48.0));
    verify(action5, never()).executeReturnDouble(eq(49.0), eq(49), eq(49), eq(49), eq(49));
    verify(action5, never()).executeReturnDouble(eq(50.0), eq(50), eq(50), eq(50), eq(50.0));
    verify(action5, never()).executeReturnDouble(eq(51.0), eq(51), eq(51), eq(51.0), eq(51));
    verify(action5, never()).executeReturnDouble(eq(52.0), eq(52), eq(52), eq(52.0), eq(52.0));
    verify(action5, never()).executeReturnDouble(eq(53.0), eq(53), eq(53.0), eq(53), eq(53));
    verify(action5, never()).executeReturnDouble(eq(54.0), eq(54), eq(54.0), eq(54), eq(54.0));
    verify(action5, never()).executeReturnDouble(eq(55.0), eq(55), eq(55.0), eq(55.0), eq(55));
    verify(action5, never()).executeReturnDouble(eq(56.0), eq(56), eq(56.0), eq(56.0), eq(56.0));
    verify(action5, never()).executeReturnDouble(eq(57.0), eq(57.0), eq(57), eq(57), eq(57));
    verify(action5, never()).executeReturnDouble(eq(58.0), eq(58.0), eq(58), eq(58), eq(58.0));
    verify(action5, never()).executeReturnDouble(eq(59.0), eq(59.0), eq(59), eq(59.0), eq(59));
    verify(action5, never()).executeReturnDouble(eq(60.0), eq(60.0), eq(60), eq(60.0), eq(60.0));
    verify(action5, never()).executeReturnDouble(eq(61.0), eq(61.0), eq(61.0), eq(61), eq(61));
    verify(action5, never()).executeReturnDouble(eq(62.0), eq(62.0), eq(62.0), eq(62), eq(62.0));
    verify(action5, never()).executeReturnDouble(eq(63.0), eq(63.0), eq(63.0), eq(63.0), eq(630));
    verify(action5, never()).executeReturnDouble(eq(64.0), eq(64.0), eq(64.0), eq(64.0), eq(64.0));

    assertThat(list).containsExactly(5.0);

    assertThat(interceptor.wrappedAction()).isSameAs(action5);
  }

  private static boolean addSumToList(List<Double> list, Number n1, Number n2, Number n3, Number n4, Number n5) {
    var sum = 0.0;
    sum += n1 instanceof Integer ? (int) n1 : (double) n1;
    sum += n2 instanceof Integer ? (int) n2 : (double) n2;
    sum += n3 instanceof Integer ? (int) n3 : (double) n3;
    sum += n4 instanceof Integer ? (int) n4 : (double) n4;
    sum += n5 instanceof Integer ? (int) n5 : (double) n5;
    return list.add(sum);
  }
}
